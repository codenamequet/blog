(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{51:function(e,t,n){"use strict";n.r(t);var s=n(0),i=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"transform-to-prime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#transform-to-prime","aria-hidden":"true"}},[this._v("#")]),this._v(" Transform to Prime")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("\nNotes\nList size is at least 2 .\n\nList's numbers will only positives (n > 0) .\n\nRepeatition of numbers in the list could occur .\n\nThe newer list's sum should equal the closest prime number .\n\nInput >> Output Examples\n1- minimumNumber ({3,1,2}) ==> return (1)\nExplanation:\nSince , the sum of the list's elements equal to (6) , the minimum number to be inserted to transform the sum to prime number is (1) , which will make the sum of the List equal the closest prime number (7) .\n\n2-  minimumNumber ({2,12,8,4,6}) ==> return (5)\nExplanation:\nSince , the sum of the list's elements equal to (32) , the minimum number to be inserted to transform the sum to prime number is (5) , which will make the sum of the List equal the closest prime number (37) .\n\n3- minimumNumber ({50,39,49,6,17,28}) ==> return (2)\nExplanation:\nSince , the sum of the list's elements equal to (189) , the minimum number to be inserted to transform the sum to prime number is (2) , which will make the sum of the List equal the closest prime number (191) .\n")])])])}],!1,null,null,null);t.default=i.exports}}]);